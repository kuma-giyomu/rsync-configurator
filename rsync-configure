#!/usr/bin/env ruby

require 'rbconfig'

class RsyncConfigurator

  DEFAULT_CONFIG_PATH = '/etc'

  SERVER_CONFIG_NAME = 'rsyncd.conf'

  SERVER_SECRETS_CONFIG_NAME = 'rsyncd.secrets'

  CONFIG_SECRETS_FILE = 'secrets file'

  CONFIG_AUTH_USERS = 'auth users'

  CONFIG_PATH = 'path'

  CONFIG_READ_ONLY = 'read only'

  REPOSITORY_DEV_SUFFIX = '-dev'

  REPOSITORY_BASE_PATH_ENV = 'RSYNC_REPOSITORY_BASE_PATH'
  
  LIST_WITH_PASSWORD = '--password'

  AUTH_MODE_WRITE_OPTION = '--write'

  def initialize(options = {})
    @options = options
    raise 'Must run as root' unless Process.uid == 0
    parse_config
    parse_secrets_file
  end

  def repo_add(repository_name = nil, *write_users)
    raise "Repository name required" if repository_name.nil? 
    raise "Repository already exists" unless @repositories[repository_name].nil?

    raise "Invalid repository name, only alphanumerics, hyphens and underscore allowed" unless repository_name =~ /^[a-zA-Z0-9_-]+$/

    public_user = repository_name.downcase
    repository_path = "#{repository_base_path}#{repository_name}"

    @repositories[repository_name] = {
      CONFIG_PATH => "#{repository_path}",
      CONFIG_AUTH_USERS => public_user
    }

    write_users.reject! { |user| @users[user].nil? }

    @repositories[repository_name + REPOSITORY_DEV_SUFFIX] = {
      CONFIG_PATH => "#{repository_path}",
      CONFIG_AUTH_USERS => write_users.join(', '),
      CONFIG_READ_ONLY => 'no'
    }

    write_user_file = false

    if @users[public_user].nil?
      @users[public_user] = generate_password
      puts "Adding new user account #{public_user}..."
      puts "Generated password: #{@users[public_user]}"
      write_user_file = true
    end

    unless Dir.exists? repository_path
      Dir.mkdir repository_path
      File.chown ENV['SUDO_UID'], ENV['SUDO_GID'], repository_path
    end

    if write_user_file
      puts "Updating secrets file..."
      write_to_file secrets_file_path(true), to_secrets_file
    end

    puts "Updating server config file..."
    write_to_file server_config_path, to_config_file

    puts "Done."
  end

  def repo_del(repository_name = nil, *options)
    raise "Repository name required" if repository_name.nil?
    raise "Unknown repository" if @repositories[repository_name].nil?

    puts "Removing repositories and the associated public user..."
    @repositories.delete repository_name
    @repositories.delete(repository_name + REPOSITORY_DEV_SUFFIX)

    @users.delete repository_name.downcase

    puts "Updating secrets file..."
    write_to_file secrets_file_path(true), to_secrets_file
  
    puts "Updating server config file..."
    write_to_file server_config_path, to_config_file

    puts "Done."
  end

  alias_method :repo_delete, :repo_del

  def repo_list(*options)
    content = []

    content << 'Defined repositories'

    show_list = lambda do|config| 
      return if config.nil? || config[CONFIG_AUTH_USERS].nil?
      config[CONFIG_AUTH_USERS].split(/\s*,\s*/).each do |user|
        content << "\t\t#{user}"
      end
    end

    @repositories.select {|key, value| key !~ /-dev$/}.each do |repo_alias, config|
      dev_config = @repositories[repo_alias + '-dev']

      content << ""
      content << "[#{repo_alias}]"
      content << "\tread access:"
      show_list.call config
      content << "\twrite access:"
      show_list.call dev_config
    end

    puts content.join "\n"
  end

  def repo_auth(repository_name = nil, *user_names)
    raise "Repository name required" if repository_name.nil?

    if user_names[0] == AUTH_MODE_WRITE_OPTION
      user_names.shift
      repository_name += REPOSITORY_DEV_SUFFIX
    end
    
    raise "Unknown repository" if @repositories[repository_name].nil?

    users = @repositories[repository_name][CONFIG_AUTH_USERS].split(/\s*,\s*/)
    user_names.each do |new_user|
      users << new_user unless @users[new_user].nil?
    end
    users.uniq!
    @repositories[repository_name][CONFIG_AUTH_USERS] = users.join ", "

    puts "Updating server config file..."
    write_to_file server_config_path, to_config_file
  end

  def repo_revoke(repository_name = nil, *user_names)
    raise "Repository name required" if repository_name.nil?
    raise "Unknown repository" if @repositories[repository_name].nil?

    update = Proc.new do |repository|
      users = repository[CONFIG_AUTH_USERS].split(/\s*,\s*/)
      user_names.each do |new_user|
        users.delete new_user 
      end
      repository[CONFIG_AUTH_USERS] = users.join ", "
    end

    update.call @repositories[repository_name]
    update.call @repositories[repository_name + REPOSITORY_DEV_SUFFIX]

    puts "Updating server config file..."
    write_to_file server_config_path, to_config_file
  end

  def user_add(user_name = nil, password = nil, *options)
    raise "User name is required" if user_name.nil?
    raise "User is already registered" unless @users[user_name].nil?

    password ||= generate_password

    @users[user_name] = password
   
    puts "Updating secrets file..."
    write_to_file secrets_file_path(true), to_secrets_file

    puts "Done."
  end

  def user_pwd(user_name = nil, password = nil, *options)
    raise "User name is required" if user_name.nil?
    raise "Password is required" if password.nil?
    raise "Unknown user" if @users[user_name].nil?

    @users[user_name] = password
   
    puts "Updating secrets file..."
    write_to_file secrets_file_path(true), to_secrets_file

    puts "Done."
  end

  def user_del(user_name = nil, *options)
    raise "User name is required" if user_name.nil?
    raise "Unknown user" if @users[user_name].nil?

    puts "Removing user from repositories..."
    @repositories.each do |repository, config|
      users = config[CONFIG_AUTH_USERS].split(/\s*,\s*/)
      users.delete user_name
      config[CONFIG_AUTH_USERS] = users.join ", "
    end

    puts "Removing user entry..."
    @users.delete user_name

    puts "Updating secrets file..."
    write_to_file secrets_file_path(true), to_secrets_file

    puts "Updating server config file..."
    write_to_file server_config_path, to_config_file

    puts "Done."
  end

  alias_method :user_delete, :user_del

  def user_list(*options)
    with_passwords = options.include? LIST_WITH_PASSWORD
    content = []

    content << 'Defined users'
    content << '-------------'
    content << ""

    @users.each do |handle, password|
      content << handle + (with_passwords ? " : " + password : "")
    end

    puts content.join "\n"
  end

  def help
    puts <<-EOL
Usage: rsync-configure SUBJECT [ACTION] <params>

  repo add      <repository_name> [<write_access_user>, ...]
  repo del      <repository_name>
  repo list
  repo auth     <repository_name> [--write] [<user_name>, ...]
  repo revoke   <repository_name> [<user_name>, ...]

  user add      <user_name> [<password>]
  user del      <user_name>
  user list     [--password]
  user pwd      <user_name> <password>

  dump
  help

EOL
  end

  def dump
    puts "*** server config file ***\n\n"
    puts to_config_file

    unless secrets_file_path.nil?
      puts "\n"
      puts "*** secrets config file ***\n\n"
      puts to_secrets_file
    end
  end

  private

  def generate_password(length = 8)
    pool =  [('a'..'z'),('A'..'Z'),('0'..'9')].map{|i| i.to_a}.flatten
    (0...length).map{ pool[rand(pool.length)] }.join
  end

  def to_config_file
    content = []

    @global_config.each do |key, value|
      content << "#{key} = #{value}"
    end

    content << ""

    @repositories.each do |repo_alias, repo_config|
      content << "[#{repo_alias}]"
      repo_config.each do |key, value|
        content << "\t#{key} = #{value}"
      end

      content << ""
    end

    content.join "\n"
  end

  def to_secrets_file
    return '' unless @users

    content = []

    @users.each do |key, value|
      content << "#{key}:#{value}"
    end

    content.join "\n"
  end

  def write_to_file(file, content)
    File.open(file, 'w') do |file|
      file.write content
    end
  end

  private

  def method_missing(symbol, *args)
    if caller[0][/`([^']*)'/, 1] == '<main>'
      puts "Unknown command: #{symbol.to_s.sub('_', ' ')}.\n"
      help
    else
      super
    end
  end

  def repository_base_path
    return @base_repository_path unless @base_repository_path.nil? || @base_repository_path.empty?

    @base_repository_path = ENV[REPOSITORY_BASE_PATH_ENV]
    @base_repository_path ||= case os
      when :macosx
        '/Shared Items/rsync_assets'
      when :linux
        '/var/rsync/rsync_assets'
      when :unix
        '/var/rsync/rsync_assets'
      else
        raise "Unable to define a default path. Please specify an environment variable #{REPOSITORY_BASE_PATH_ENV} pointing at a suitable location."
    end

    # cleanup to make sure it always ends in a /
    @base_repository_path = @base_repository_path.gsub(Regexp.new("#{File::SEPARATOR}+$"), '') + File::SEPARATOR
  end

  def os
    @os ||= (
      host_os = RbConfig::CONFIG['host_os']
      case host_os
      when /mswin|msys|mingw|cygwin|bccwin|wince|emc/
        :windows
      when /darwin|mac os/
        :macosx
      when /linux/
        :linux
      when /solaris|bsd/
        :unix
      else
        raise "Unknown os: #{host_os.inspect}"
      end
    )
  end

  def config_path
    @options[:config_path] || DEFAULT_CONFIG_PATH
  end

  def server_config_path
    config_path + File::SEPARATOR + SERVER_CONFIG_NAME
  end

  def secrets_file_path(generate = false)
    if generate && @global_config[CONFIG_SECRETS_FILE].nil?
      @global_config[CONFIG_SECRETS_FILE] ||= config_path + File::SEPARATOR + SERVER_SECRETS_CONFIG_NAME
    end

    @global_config[CONFIG_SECRETS_FILE]
  end

  def parse_config
    @active_repository = nil

    @global_config = {}
    @repositories = {}

    raise "Config file does not exist: #{server_config_path}" unless File.exists? server_config_path
    raise "Config file is not readable: #{server_config_path}" unless File.readable? server_config_path

    File.open(server_config_path, 'r').each do |line|
      parse_config_line line
    end
  end

  def parse_config_line(line)
    fragments = line.strip!.split /\s*=\s*/, 2

    head = fragments.shift
    tail = fragments.shift

    return unless head && head.length > 0 && head[0] != '#'

    if head =~ /\[.+\]/
      @active_repository = head[1..-2]
      @repositories[@active_repository] = {}
    else
      if(@active_repository)
        @repositories[@active_repository][head] = tail
      else
        @global_config[head.downcase] = tail
      end
    end
  end

  def parse_secrets_file
    @users = {}

    return if @global_config[CONFIG_SECRETS_FILE].nil?

    raise "Secrets file does not exist: #{secrets_file_path}" unless File.exists? secrets_file_path
    raise "Secrets file is not readable: #{secrets_file_path}" unless File.readable? secrets_file_path

    File.open(@global_config[CONFIG_SECRETS_FILE], 'r').each do |line|
      parse_secrets_line line
    end
  end

  def parse_secrets_line(line)
    line.strip!

    fragments = line.split /\s*:\s*/, 2

    head = fragments.shift
    tail = fragments.shift || ''

    return unless head && head.length > 0 && head[0] != '#'

    @users[head] = tail
  end

end



subject = ARGV.shift || 'help' # get the command subject
action = ARGV.shift || '' # get the command action
action = '_' + action if action.length > 0

command = "#{subject.downcase}#{action.downcase}"

begin
  RsyncConfigurator.new.send command.to_sym, *ARGV
rescue RuntimeError => e
  puts e.to_s
end


